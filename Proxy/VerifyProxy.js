// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "Verify.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var civetTenantCenter = civetTenantCenter || {};
module.exports.civetTenantCenter = civetTenantCenter;

civetTenantCenter.VerifyProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

civetTenantCenter.VerifyProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

civetTenantCenter.VerifyProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

civetTenantCenter.VerifyProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

civetTenantCenter.VerifyProxy.prototype.getVersion = function () {
    return this._worker.version;
};

civetTenantCenter.E_VERIFY_CODE = {
    "EVC_TOKEN_EXPIRE" : -3,
    "EVC_ERR_TOKEN" : -2,
    "EVC_SYS_ERR" : -1,
    "EVC_SUCC" : 0
};
civetTenantCenter.E_VERIFY_CODE._classname = "civetTenantCenter.E_VERIFY_CODE";
civetTenantCenter.E_VERIFY_CODE._write = function(os, tag, val) { return os.writeInt32(tag, val); };
civetTenantCenter.E_VERIFY_CODE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); };

civetTenantCenter.VeifyReq = function() {
    this.token = "";
    this.verifyHeaders = new TarsStream.Map(TarsStream.String, TarsStream.String);
    this.body = new TarsStream.BinBuffer;
    this._classname = "civetTenantCenter.VeifyReq";
};
civetTenantCenter.VeifyReq._classname = "civetTenantCenter.VeifyReq";
civetTenantCenter.VeifyReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetTenantCenter.VeifyReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetTenantCenter.VeifyReq._readFrom = function (is) {
    var tmp = new civetTenantCenter.VeifyReq;
    tmp.token = is.readString(1, true, "");
    tmp.verifyHeaders = is.readMap(2, false, TarsStream.Map(TarsStream.String, TarsStream.String));
    tmp.body = is.readBytes(3, false, TarsStream.BinBuffer);
    return tmp;
};
civetTenantCenter.VeifyReq.prototype._writeTo = function (os) {
    os.writeString(1, this.token);
    os.writeMap(2, this.verifyHeaders);
    os.writeBytes(3, this.body);
};
civetTenantCenter.VeifyReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetTenantCenter.VeifyReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetTenantCenter.VeifyReq.prototype.toObject = function() { 
    return {
        "token" : this.token,
        "verifyHeaders" : this.verifyHeaders.toObject(),
        "body" : this.body.toObject()
    };
};
civetTenantCenter.VeifyReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "token") && (this.token = json.token);
    _hasOwnProperty.call(json, "verifyHeaders") && (this.verifyHeaders.readFromObject(json.verifyHeaders));
    _hasOwnProperty.call(json, "body") && (this.body.readFromObject(json.body));
    return this;
};
civetTenantCenter.VeifyReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetTenantCenter.VeifyReq.new = function () {
    return new civetTenantCenter.VeifyReq();
};
civetTenantCenter.VeifyReq.create = function (is) {
    return civetTenantCenter.VeifyReq._readFrom(is);
};

civetTenantCenter.VeifyRsp = function() {
    this.ret = 0;
    this.uid = "";
    this.context = "";
    this._classname = "civetTenantCenter.VeifyRsp";
};
civetTenantCenter.VeifyRsp._classname = "civetTenantCenter.VeifyRsp";
civetTenantCenter.VeifyRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetTenantCenter.VeifyRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetTenantCenter.VeifyRsp._readFrom = function (is) {
    var tmp = new civetTenantCenter.VeifyRsp;
    tmp.ret = is.readInt32(1, true, 0);
    tmp.uid = is.readString(2, false, "");
    tmp.context = is.readString(3, false, "");
    return tmp;
};
civetTenantCenter.VeifyRsp.prototype._writeTo = function (os) {
    os.writeInt32(1, this.ret);
    os.writeString(2, this.uid);
    os.writeString(3, this.context);
};
civetTenantCenter.VeifyRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetTenantCenter.VeifyRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetTenantCenter.VeifyRsp.prototype.toObject = function() { 
    return {
        "ret" : this.ret,
        "uid" : this.uid,
        "context" : this.context
    };
};
civetTenantCenter.VeifyRsp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ret") && (this.ret = json.ret);
    _hasOwnProperty.call(json, "uid") && (this.uid = json.uid);
    _hasOwnProperty.call(json, "context") && (this.context = json.context);
    return this;
};
civetTenantCenter.VeifyRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetTenantCenter.VeifyRsp.new = function () {
    return new civetTenantCenter.VeifyRsp();
};
civetTenantCenter.VeifyRsp.create = function (is) {
    return civetTenantCenter.VeifyRsp._readFrom(is);
};

var __civetTenantCenter_Verify$verify$IF = {
    "name" : "verify",
    "return" : "int32",
    "arguments" : [{
        "name" : "req",
        "class" : "civetTenantCenter.VeifyReq",
        "direction" : "in"
    }, {
        "name" : "rsp",
        "class" : "civetTenantCenter.VeifyRsp",
        "direction" : "out"
    }]
};

var __civetTenantCenter_Verify$verify$IE = function (req) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, req);
    return os.getBinBuffer();
};

var __civetTenantCenter_Verify$verify$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "rsp" : is.readStruct(2, true, civetTenantCenter.VeifyRsp)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_Verify$verify$PE = function (req, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("req", req);
    return tup;
};

var __civetTenantCenter_Verify$verify$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "rsp" : tup.readStruct("rsp", civetTenantCenter.VeifyRsp)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_Verify$verify$ER = function (data) {
    throw _makeError(data, "Call Verify::verify failed");
};

civetTenantCenter.VerifyProxy.prototype.verify = function (req) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("verify", __civetTenantCenter_Verify$verify$PE(req, version), arguments[arguments.length - 1], __civetTenantCenter_Verify$verify$IF).then(__civetTenantCenter_Verify$verify$PD, __civetTenantCenter_Verify$verify$ER);
    } else {
        return this._worker.tars_invoke("verify", __civetTenantCenter_Verify$verify$IE(req), arguments[arguments.length - 1], __civetTenantCenter_Verify$verify$IF).then(__civetTenantCenter_Verify$verify$ID, __civetTenantCenter_Verify$verify$ER);
    }
};
civetTenantCenter.VerifyProxy.verify = __civetTenantCenter_Verify$verify$IF;



