// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "TenantProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var civetTenantCenter = civetTenantCenter || {};
module.exports.civetTenantCenter = civetTenantCenter;

civetTenantCenter.TenantProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

civetTenantCenter.TenantProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

civetTenantCenter.TenantProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

civetTenantCenter.TenantProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

civetTenantCenter.TenantProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

civetTenantCenter.UserBasicInfo = function() {
    this.id = 0;
    this.username = "";
    this.name = "";
    this.password = "";
    this.number = "";
    this.email = "";
    this.sex = "";
    this.enable = "";
    this.wechatID = "";
    this.Role = 0;
    this.enterprise = 0;
    this.department = 0;
    this.createTime = 0;
    this.UpdateTime = 0;
    this._classname = "civetTenantCenter.UserBasicInfo";
};
civetTenantCenter.UserBasicInfo._classname = "civetTenantCenter.UserBasicInfo";
civetTenantCenter.UserBasicInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetTenantCenter.UserBasicInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetTenantCenter.UserBasicInfo._readFrom = function (is) {
    var tmp = new civetTenantCenter.UserBasicInfo;
    tmp.id = is.readInt32(0, true, 0);
    tmp.username = is.readString(1, false, "");
    tmp.name = is.readString(2, false, "");
    tmp.password = is.readString(3, false, "");
    tmp.number = is.readString(4, false, "");
    tmp.email = is.readString(5, false, "");
    tmp.sex = is.readString(6, false, "");
    tmp.enable = is.readString(7, false, "");
    tmp.wechatID = is.readString(8, false, "");
    tmp.Role = is.readInt32(9, false, 0);
    tmp.enterprise = is.readInt32(10, false, 0);
    tmp.department = is.readInt32(11, false, 0);
    tmp.createTime = is.readInt64(12, false, 0);
    tmp.UpdateTime = is.readInt64(13, false, 0);
    return tmp;
};
civetTenantCenter.UserBasicInfo.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.username);
    os.writeString(2, this.name);
    os.writeString(3, this.password);
    os.writeString(4, this.number);
    os.writeString(5, this.email);
    os.writeString(6, this.sex);
    os.writeString(7, this.enable);
    os.writeString(8, this.wechatID);
    os.writeInt32(9, this.Role);
    os.writeInt32(10, this.enterprise);
    os.writeInt32(11, this.department);
    os.writeInt64(12, this.createTime);
    os.writeInt64(13, this.UpdateTime);
};
civetTenantCenter.UserBasicInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetTenantCenter.UserBasicInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetTenantCenter.UserBasicInfo.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "username" : this.username,
        "name" : this.name,
        "password" : this.password,
        "number" : this.number,
        "email" : this.email,
        "sex" : this.sex,
        "enable" : this.enable,
        "wechatID" : this.wechatID,
        "Role" : this.Role,
        "enterprise" : this.enterprise,
        "department" : this.department,
        "createTime" : this.createTime,
        "UpdateTime" : this.UpdateTime
    };
};
civetTenantCenter.UserBasicInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "username") && (this.username = json.username);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "password") && (this.password = json.password);
    _hasOwnProperty.call(json, "number") && (this.number = json.number);
    _hasOwnProperty.call(json, "email") && (this.email = json.email);
    _hasOwnProperty.call(json, "sex") && (this.sex = json.sex);
    _hasOwnProperty.call(json, "enable") && (this.enable = json.enable);
    _hasOwnProperty.call(json, "wechatID") && (this.wechatID = json.wechatID);
    _hasOwnProperty.call(json, "Role") && (this.Role = json.Role);
    _hasOwnProperty.call(json, "enterprise") && (this.enterprise = json.enterprise);
    _hasOwnProperty.call(json, "department") && (this.department = json.department);
    _hasOwnProperty.call(json, "createTime") && (this.createTime = json.createTime);
    _hasOwnProperty.call(json, "UpdateTime") && (this.UpdateTime = json.UpdateTime);
    return this;
};
civetTenantCenter.UserBasicInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetTenantCenter.UserBasicInfo.new = function () {
    return new civetTenantCenter.UserBasicInfo();
};
civetTenantCenter.UserBasicInfo.create = function (is) {
    return civetTenantCenter.UserBasicInfo._readFrom(is);
};

var __civetTenantCenter_TenantProcess$checkPassword$IF = {
    "name" : "checkPassword",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "info",
        "class" : "civetTenantCenter.UserBasicInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "bool",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$checkPassword$IE = function (CompanyID, info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeStruct(2, info);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$checkPassword$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readBoolean(3, true, true)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$checkPassword$PE = function (CompanyID, info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeStruct("info", info);
    return tup;
};

var __civetTenantCenter_TenantProcess$checkPassword$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readBoolean("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$checkPassword$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::checkPassword failed");
};

civetTenantCenter.TenantProcessProxy.prototype.checkPassword = function (CompanyID, info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkPassword", __civetTenantCenter_TenantProcess$checkPassword$PE(CompanyID, info, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$checkPassword$IF).then(__civetTenantCenter_TenantProcess$checkPassword$PD, __civetTenantCenter_TenantProcess$checkPassword$ER);
    } else {
        return this._worker.tars_invoke("checkPassword", __civetTenantCenter_TenantProcess$checkPassword$IE(CompanyID, info), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$checkPassword$IF).then(__civetTenantCenter_TenantProcess$checkPassword$ID, __civetTenantCenter_TenantProcess$checkPassword$ER);
    }
};
civetTenantCenter.TenantProcessProxy.checkPassword = __civetTenantCenter_TenantProcess$checkPassword$IF;

var __civetTenantCenter_TenantProcess$userAdd$IF = {
    "name" : "userAdd",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "info",
        "class" : "civetTenantCenter.UserBasicInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$userAdd$IE = function (CompanyID, info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeStruct(2, info);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$userAdd$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userAdd$PE = function (CompanyID, info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeStruct("info", info);
    return tup;
};

var __civetTenantCenter_TenantProcess$userAdd$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userAdd$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::userAdd failed");
};

civetTenantCenter.TenantProcessProxy.prototype.userAdd = function (CompanyID, info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("userAdd", __civetTenantCenter_TenantProcess$userAdd$PE(CompanyID, info, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userAdd$IF).then(__civetTenantCenter_TenantProcess$userAdd$PD, __civetTenantCenter_TenantProcess$userAdd$ER);
    } else {
        return this._worker.tars_invoke("userAdd", __civetTenantCenter_TenantProcess$userAdd$IE(CompanyID, info), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userAdd$IF).then(__civetTenantCenter_TenantProcess$userAdd$ID, __civetTenantCenter_TenantProcess$userAdd$ER);
    }
};
civetTenantCenter.TenantProcessProxy.userAdd = __civetTenantCenter_TenantProcess$userAdd$IF;

var __civetTenantCenter_TenantProcess$userDelete$IF = {
    "name" : "userDelete",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "id",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$userDelete$IE = function (CompanyID, id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeInt32(2, id);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$userDelete$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userDelete$PE = function (CompanyID, id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeInt32("id", id);
    return tup;
};

var __civetTenantCenter_TenantProcess$userDelete$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userDelete$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::userDelete failed");
};

civetTenantCenter.TenantProcessProxy.prototype.userDelete = function (CompanyID, id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("userDelete", __civetTenantCenter_TenantProcess$userDelete$PE(CompanyID, id, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userDelete$IF).then(__civetTenantCenter_TenantProcess$userDelete$PD, __civetTenantCenter_TenantProcess$userDelete$ER);
    } else {
        return this._worker.tars_invoke("userDelete", __civetTenantCenter_TenantProcess$userDelete$IE(CompanyID, id), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userDelete$IF).then(__civetTenantCenter_TenantProcess$userDelete$ID, __civetTenantCenter_TenantProcess$userDelete$ER);
    }
};
civetTenantCenter.TenantProcessProxy.userDelete = __civetTenantCenter_TenantProcess$userDelete$IF;

var __civetTenantCenter_TenantProcess$userQueryAll$IF = {
    "name" : "userQueryAll",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "numbers",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Pages",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "UserMemberList",
        "class" : "list(civetTenantCenter.UserBasicInfo)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$userQueryAll$IE = function (CompanyID, numbers, Pages) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeInt32(2, numbers);
    os.writeInt32(3, Pages);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$userQueryAll$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "UserMemberList" : is.readList(4, true, TarsStream.List(civetTenantCenter.UserBasicInfo)),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userQueryAll$PE = function (CompanyID, numbers, Pages, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeInt32("numbers", numbers);
    tup.writeInt32("Pages", Pages);
    return tup;
};

var __civetTenantCenter_TenantProcess$userQueryAll$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "UserMemberList" : tup.readList("UserMemberList", TarsStream.List(civetTenantCenter.UserBasicInfo)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userQueryAll$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::userQueryAll failed");
};

civetTenantCenter.TenantProcessProxy.prototype.userQueryAll = function (CompanyID, numbers, Pages) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("userQueryAll", __civetTenantCenter_TenantProcess$userQueryAll$PE(CompanyID, numbers, Pages, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userQueryAll$IF).then(__civetTenantCenter_TenantProcess$userQueryAll$PD, __civetTenantCenter_TenantProcess$userQueryAll$ER);
    } else {
        return this._worker.tars_invoke("userQueryAll", __civetTenantCenter_TenantProcess$userQueryAll$IE(CompanyID, numbers, Pages), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userQueryAll$IF).then(__civetTenantCenter_TenantProcess$userQueryAll$ID, __civetTenantCenter_TenantProcess$userQueryAll$ER);
    }
};
civetTenantCenter.TenantProcessProxy.userQueryAll = __civetTenantCenter_TenantProcess$userQueryAll$IF;

var __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$IF = {
    "name" : "userQueryByKeyWordStringList",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keyword",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "stringWord",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "UserMemberList",
        "class" : "list(civetTenantCenter.UserBasicInfo)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$IE = function (CompanyID, keyword, stringWord) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeString(2, keyword);
    os.writeString(3, stringWord);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "UserMemberList" : is.readList(4, true, TarsStream.List(civetTenantCenter.UserBasicInfo)),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$PE = function (CompanyID, keyword, stringWord, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeString("keyword", keyword);
    tup.writeString("stringWord", stringWord);
    return tup;
};

var __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "UserMemberList" : tup.readList("UserMemberList", TarsStream.List(civetTenantCenter.UserBasicInfo)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::userQueryByKeyWordStringList failed");
};

civetTenantCenter.TenantProcessProxy.prototype.userQueryByKeyWordStringList = function (CompanyID, keyword, stringWord) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("userQueryByKeyWordStringList", __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$PE(CompanyID, keyword, stringWord, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$IF).then(__civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$PD, __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$ER);
    } else {
        return this._worker.tars_invoke("userQueryByKeyWordStringList", __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$IE(CompanyID, keyword, stringWord), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$IF).then(__civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$ID, __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$ER);
    }
};
civetTenantCenter.TenantProcessProxy.userQueryByKeyWordStringList = __civetTenantCenter_TenantProcess$userQueryByKeyWordStringList$IF;

var __civetTenantCenter_TenantProcess$userQueryBykeyWordString$IF = {
    "name" : "userQueryBykeyWordString",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keyword",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "stringWord",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "UserMember",
        "class" : "civetTenantCenter.UserBasicInfo",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$userQueryBykeyWordString$IE = function (CompanyID, keyword, stringWord) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeString(2, keyword);
    os.writeString(3, stringWord);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$userQueryBykeyWordString$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "UserMember" : is.readStruct(4, true, civetTenantCenter.UserBasicInfo),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userQueryBykeyWordString$PE = function (CompanyID, keyword, stringWord, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeString("keyword", keyword);
    tup.writeString("stringWord", stringWord);
    return tup;
};

var __civetTenantCenter_TenantProcess$userQueryBykeyWordString$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "UserMember" : tup.readStruct("UserMember", civetTenantCenter.UserBasicInfo),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userQueryBykeyWordString$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::userQueryBykeyWordString failed");
};

civetTenantCenter.TenantProcessProxy.prototype.userQueryBykeyWordString = function (CompanyID, keyword, stringWord) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("userQueryBykeyWordString", __civetTenantCenter_TenantProcess$userQueryBykeyWordString$PE(CompanyID, keyword, stringWord, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userQueryBykeyWordString$IF).then(__civetTenantCenter_TenantProcess$userQueryBykeyWordString$PD, __civetTenantCenter_TenantProcess$userQueryBykeyWordString$ER);
    } else {
        return this._worker.tars_invoke("userQueryBykeyWordString", __civetTenantCenter_TenantProcess$userQueryBykeyWordString$IE(CompanyID, keyword, stringWord), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userQueryBykeyWordString$IF).then(__civetTenantCenter_TenantProcess$userQueryBykeyWordString$ID, __civetTenantCenter_TenantProcess$userQueryBykeyWordString$ER);
    }
};
civetTenantCenter.TenantProcessProxy.userQueryBykeyWordString = __civetTenantCenter_TenantProcess$userQueryBykeyWordString$IF;

var __civetTenantCenter_TenantProcess$userUpdateByString$IF = {
    "name" : "userUpdateByString",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "id",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keyword",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetTenantCenter_TenantProcess$userUpdateByString$IE = function (CompanyID, id, keyword, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeInt32(2, id);
    os.writeString(3, keyword);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __civetTenantCenter_TenantProcess$userUpdateByString$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userUpdateByString$PE = function (CompanyID, id, keyword, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeInt32("id", id);
    tup.writeString("keyword", keyword);
    tup.writeString("value", value);
    return tup;
};

var __civetTenantCenter_TenantProcess$userUpdateByString$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetTenantCenter_TenantProcess$userUpdateByString$ER = function (data) {
    throw _makeError(data, "Call TenantProcess::userUpdateByString failed");
};

civetTenantCenter.TenantProcessProxy.prototype.userUpdateByString = function (CompanyID, id, keyword, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("userUpdateByString", __civetTenantCenter_TenantProcess$userUpdateByString$PE(CompanyID, id, keyword, value, version), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userUpdateByString$IF).then(__civetTenantCenter_TenantProcess$userUpdateByString$PD, __civetTenantCenter_TenantProcess$userUpdateByString$ER);
    } else {
        return this._worker.tars_invoke("userUpdateByString", __civetTenantCenter_TenantProcess$userUpdateByString$IE(CompanyID, id, keyword, value), arguments[arguments.length - 1], __civetTenantCenter_TenantProcess$userUpdateByString$IF).then(__civetTenantCenter_TenantProcess$userUpdateByString$ID, __civetTenantCenter_TenantProcess$userUpdateByString$ER);
    }
};
civetTenantCenter.TenantProcessProxy.userUpdateByString = __civetTenantCenter_TenantProcess$userUpdateByString$IF;



